<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Partial Content</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://http206.com/"/>
  <updated>2017-03-29T01:41:39.000Z</updated>
  <id>https://http206.com/</id>
  
  <author>
    <name>Nevins</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Scalable logging infrastructure</title>
    <link href="https://http206.com/2017/03/28/Scalable-logging-infrastructure/"/>
    <id>https://http206.com/2017/03/28/Scalable-logging-infrastructure/</id>
    <published>2017-03-29T01:00:45.000Z</published>
    <updated>2017-03-29T01:41:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>For any OPs team one of the goals is to deploy services with as little operational overhead as possible. This means designing infrastructure that is resilient and self-healing. Recently I had an opportunity to apply these principles to part of $EMPLOYERS core internal services; our logging stack.</p>
<p>The first part of the task was to identify what properties we required of this system:</p>
<ul>
<li>Scalable<ul>
<li>Being logging infrastructure this system needed to support high volumes of ingest data as well as querying data at rest.</li>
</ul>
</li>
<li>Highly Available<ul>
<li>We should be at least able to queue logs to later ingest if some part of the system isn’t working.</li>
</ul>
</li>
<li>Resilient storage<ul>
<li>Some logs, like security logs, we may need to keep for long periods of time in a secure manner.</li>
</ul>
</li>
<li>Low operational overhead<ul>
<li>Though we need this system to be available we don’t want to spent to much time keeping it running.</li>
</ul>
</li>
</ul>
<p><img src="/images/logging.png" alt=""></p>
<p>This is what we ended up with:</p>
<ul>
<li>Ingest<ul>
<li><a href="https://aws.amazon.com/kinesis/" target="_blank" rel="external">AWS Kinesis</a></li>
</ul>
</li>
<li>Processing<ul>
<li><a href="https://www.elastic.co/products/logstash" target="_blank" rel="external">Logstash</a> running on <a href="https://aws.amazon.com/ecs/" target="_blank" rel="external">AWS ECS</a></li>
</ul>
</li>
<li>Storage<ul>
<li><a href="https://aws.amazon.com/s3/" target="_blank" rel="external">AWS S3</a></li>
<li><a href="https://aws.amazon.com/elasticsearch-service/" target="_blank" rel="external">AWS ElasticSearch Service</a></li>
</ul>
</li>
<li>Interface<ul>
<li><a href="https://www.elastic.co/products/kibana" target="_blank" rel="external">Kibana</a> (built into the ElasticSearch Service)</li>
</ul>
</li>
</ul>
<p>This gives us all of the features we are looking for. Within reasonable limits all of these components are scalable to very large data volumes. By running ECS cluster on top of an ASG spread across AZs we have a high degree of availability for all components. S3, as we all know, has a somewhat absurd number of 9s around data durability and we can leverage versioning, access logs as well as encryption at rest to ensure data integrity. Kinesis was the newest piece to me, highly scalable and fast, I think it will be core to similar infrastructures for me in the future.</p>
<p>All of this was of course rolled up into a reusable <a href="https://www.terraform.io/" target="_blank" rel="external">Terraform</a> module. This allows our team to roll this out for different environments in a reproducible manner.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;For any OPs team one of the goals is to deploy services with as little operational overhead as possible. This means designing infrastruct
    
    </summary>
    
    
      <category term="AWS" scheme="https://http206.com/tags/AWS/"/>
    
      <category term="Logging" scheme="https://http206.com/tags/Logging/"/>
    
  </entry>
  
  <entry>
    <title>Using Falco to secure Docker containers</title>
    <link href="https://http206.com/2016/07/01/Using-Falco-to-secure-Docker-containers/"/>
    <id>https://http206.com/2016/07/01/Using-Falco-to-secure-Docker-containers/</id>
    <published>2016-07-02T01:28:56.000Z</published>
    <updated>2016-07-02T02:39:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve been looking for an excuse to use <a href="http://www.sysdig.org/" target="_blank" rel="external">Sysdig</a> since I first heard about it at a bsides BOS conference a couple of years ago. This came to a head recently while at <a href="http://2016.dockercon.com/" target="_blank" rel="external">DockerCon</a> in Seattle.</p>
<p>While there I had a chance to look at the new Sysdig monitoring for Docker which is pretty damn cool. The more interesting piece though was their newly opensourced tool <a href="http://www.sysdig.org/falco/" target="_blank" rel="external">Falco</a>. Falco, in a nut shell, lets to create rules that will monitor for and alert on basically anything that is happening on your linux system. So now I needed to find a reason to use it.</p>
<p>This brings us back to Docker. The security of Docker is something that is very interesting to me. One feature which I’ve looked at before but always had a hard time figuring out how to use well is <a href="https://github.com/docker/docker/blob/master/docs/security/seccomp.md" target="_blank" rel="external">Seccomp</a>. Seccomp profiles with Docker allow you to limit what syscalls your Docker container is allowed to make to the underlying system. By default Docker disables about 40 out of 300 syscalls. That’s pretty good, but lets see if we can leverage Falco to do better.</p>
<p>Let’s start with Falco. Falco is container aware which means we can create a rule really simply.<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">- rule:</span> container_syscall</div><div class="line"><span class="attr">  desc:</span> Capture syscalls for any docker container</div><div class="line"><span class="attr">  priority:</span> WARNING</div><div class="line"><span class="attr">  condition:</span> container.id != host and syscall.type exists</div><div class="line"><span class="attr">  output:</span> <span class="string">"%container.id:%syscall.type"</span></div></pre></td></tr></table></figure></p>
<p>This rule simply states, if you see a container making a syscall log the container’s id and the syscall that is being made. With that rule in place, and Falco configured to log JSON, we can start the Falco daemon and running a Nginx Docker container gives us the following output:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attr">"output"</span>:<span class="string">"15:07:59.736531417: Warning 7a68a113b2a4:clone"</span>,<span class="attr">"priority"</span>:<span class="string">"Warning"</span>,<span class="attr">"rule"</span>:<span class="string">"container_syscall"</span>,<span class="attr">"time"</span>:<span class="string">"2016-07-01T19:07:59.736531417Z"</span>&#125;</div><div class="line">&#123;<span class="attr">"output"</span>:<span class="string">"15:07:59.736536327: Warning 7a68a113b2a4:set_robust_list"</span>,<span class="attr">"priority"</span>:<span class="string">"Warning"</span>,<span class="attr">"rule"</span>:<span class="string">"container_syscall"</span>,<span class="attr">"time"</span>:<span class="string">"2016-07-01T19:07:59.736536327Z"</span>&#125;</div><div class="line">&#123;<span class="attr">"output"</span>:<span class="string">"15:07:59.736536539: Warning 7a68a113b2a4:set_robust_list"</span>,<span class="attr">"priority"</span>:<span class="string">"Warning"</span>,<span class="attr">"rule"</span>:<span class="string">"container_syscall"</span>,<span class="attr">"time"</span>:<span class="string">"2016-07-01T19:07:59.736536539Z"</span>&#125;</div></pre></td></tr></table></figure>
<p>That’s awesome! We now have a log of all the syscalls being made by that Docker container. So what do we do with this?</p>
<p>To help with this task I’ve released <a href="https://github.com/nevins-b/falco2seccomp" target="_blank" rel="external">falco2seccomp</a>. This is a pretty simple Go project written to parse the output from Falco and generate a ready to go seccomp profile. Here’s example usage:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">falco2seccomp -log events.log -container-id 7a68a113b2a4</div><div class="line">&#123;</div><div class="line">    &quot;defaultAction&quot;: &quot;SCMP_ACT_ERRNO&quot;,</div><div class="line">    &quot;architectures&quot;: [</div><div class="line">        &quot;SCMP_ARCH_X86_64&quot;,</div><div class="line">        &quot;SCMP_ARCH_X86&quot;</div><div class="line">    ],</div><div class="line">    &quot;syscalls&quot;: [</div><div class="line">        &#123;</div><div class="line">            &quot;name&quot;: &quot;set_robust_list&quot;,</div><div class="line">            &quot;action&quot;: &quot;SCMP_ACT_ALLOW&quot;,</div><div class="line">            &quot;args&quot;: []</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            &quot;name&quot;: &quot;gettid&quot;,</div><div class="line">            &quot;action&quot;: &quot;SCMP_ACT_ALLOW&quot;,</div><div class="line">            &quot;args&quot;: []</div><div class="line">        &#125;,</div><div class="line">        ...</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>This is a ready to use out of the box seccomp profile for our nginx container, limited to just the syscalls we actually saw the container using. Instead of blacklisting 40 syscalls, we’re only allowing 41. Again, awesome.</p>
<p>So how can you use this in the real world? One thought would be to integrate it into a CI/CD pipeline. If your builds are being done in a Docker container your tests should be exercising your code enough to generate the full list of syscalls required. boom.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I’ve been looking for an excuse to use &lt;a href=&quot;http://www.sysdig.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sysdig&lt;/a&gt; since I first heard abo
    
    </summary>
    
    
      <category term="security" scheme="https://http206.com/tags/security/"/>
    
      <category term="Docker" scheme="https://http206.com/tags/Docker/"/>
    
      <category term="Falco" scheme="https://http206.com/tags/Falco/"/>
    
  </entry>
  
</feed>
